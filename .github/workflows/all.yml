name: deploy all services

on:
  push:
    branches: # autodeploy
      - main
      - staging
      - prod
  workflow_dispatch: # manual trigger

env:
  DEPLOY_STAGE: ${{ (github.ref_name == 'prod' || github.ref_type == 'tag') && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}
  NODE_OPTIONS: "--max-old-space-size=5120" # 5GB
  SLACK_MESSAGE_PAYLOAD_ARTIFACT_NAME: "slack-message-payload"
  SLACK_MESSAGE_PAYLOAD_PATH: "slack-message-payload.json"

# service names defined in strategy.matrix must match the directory name (under ./services) in which the service (with its serverless.yml) is located

jobs:
  deploy-first-phase:
    name: ${{ matrix.service }} deploy
    runs-on: ubuntu-latest
    environment: ${{ (github.ref_name == 'prod' || github.ref_type == 'tag') && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}
    concurrency:
      group: ${{ github.ref }}-${{ github.job }}
      cancel-in-progress: true
    strategy:
      matrix:
        node-version: [16.15.0]
        service:
          - "service-base-1"
          - "service-base-2"
          - "service-base-3"
    steps:
      - name: echo service name
        run: echo ${{ matrix.service }}
      - name: echo environment name
        run: echo ${{ env.ENV_NAME }}
      - name: echo branch name
        run: echo ${{ github.ref_name }}

  deploy-second-phase:
    name: ${{ matrix.service }} deploy
    needs: deploy-first-phase
    runs-on: ubuntu-latest
    environment: ${{ (github.ref_name == 'prod' || github.ref_type == 'tag') && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}
    concurrency:
      group: ${{ github.ref }}-${{ github.job }}
      cancel-in-progress: true
    strategy:
      matrix:
        node-version: [16.15.0]
        service:
          - "service-one"
          - "service-two"
          - "service-three"
          - "service-four"
    steps:
      - name: echo service name
        run: echo ${{ matrix.service }}
      - name: echo environment name
        run: echo ${{ env.ENV_NAME }}
      - name: echo branch name
        run: echo ${{ github.ref_name }}

  migrations:
    name: Execute migrations
    needs: [deploy-second-phase]
    runs-on: ubuntu-latest
    environment: ${{ (github.ref_name == 'prod' || github.ref_type == 'tag') || github.ref_name == 'staging' && 'staging' || 'dev' }}
    strategy:
      matrix:
        node-version: [16.15.0]
    steps:
      - name: echo service name
        run: echo migrations

  config-sync:
    name: Config sync
    needs: [deploy-second-phase]
    runs-on: ubuntu-latest
    environment: ${{ (github.ref_name == 'prod' || github.ref_type == 'tag') && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}
    strategy:
      matrix:
        node-version: [16.15.0]
    steps:
      - name: echo service name
        run: echo config sync

  bump-version:
    name: Bump node package version
    needs: [migrations, config-sync]
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' # only run in main branch (dev)
    environment: dev # use always dev
    strategy:
      matrix:
        node-version: [16.15.0]
    steps:
      - name: echo service name
        run: echo config sync

  tag-version:
    name: Tag version to be released
    needs: [migrations, config-sync]
    runs-on: ubuntu-latest
    if: github.ref_name == 'prod' # only prod
    environment: prod # use always prod
    strategy:
      matrix:
        node-version: [16.15.0]
    steps:
      - name: echo service name
        run: echo config sync

  create-release:
    name: Create Release
    needs: [tag-version]
    runs-on: ubuntu-latest
    if: github.ref_name == 'prod' # only prod
    environment: prod # use always prod
    strategy:
      matrix:
        node-version: [16.15.0]
    steps:
      - name: echo service name
        run: echo config sync

  upload-summarized-deployment-info:
    name: Upload slack-message-payload artifact
    needs: [deploy-second-phase]
    runs-on: ubuntu-latest
    steps:
      - name: Create slack message payload
        run: |
          echo '{
            "environment": "${{ env.ENVIRONMENT }}",
            "branch":"${{ env.BRANCH }}",
            "commit": "${{ env.COMMIT }}",
            "deploymentType": "${{ env.DEPLOYMENT_TYPE }}",
            "services": "${{ env.SERVICES }}"
          }' > $SLACK_MESSAGE_PAYLOAD_PATH
        env:
          ENVIRONMENT: ${{ env.DEPLOY_STAGE }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          DEPLOYMENT_TYPE: ${{ github.event_name == 'workflow_dispatch' && github.ref_type == 'tag' && 'manual rollback' || github.event_name == 'workflow_dispatch' && 'manual' || github.event_name == 'push' && 'automatic' || github.event_name }}
          SERVICES: all
      - run: cat $SLACK_MESSAGE_PAYLOAD_PATH
      - name: Store file as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.SLACK_MESSAGE_PAYLOAD_ARTIFACT_NAME }}
          path: ${{ env.SLACK_MESSAGE_PAYLOAD_PATH }}
          retention-days: 7

  notification-dev:
    name: notifications dev
    needs: [bump-version, upload-summarized-deployment-info]
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' # only run in main branch (dev)
    environment: dev # use always dev
    permissions:
      contents: write
    strategy:
      matrix:
        node-version: [16.15.0]
    steps:
      - name: Download slack-message-payload artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.SLACK_MESSAGE_PAYLOAD_ARTIFACT_NAME }}
      - name: echo service name
        run: echo config sync
      - name: cat file
        run: cat ${{ env.SLACK_MESSAGE_PAYLOAD_PATH }}
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload-file-path: ${{ env.SLACK_MESSAGE_PAYLOAD_PATH }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notification-staging:
    name: notifications staging
    needs: [migrations, config-sync, upload-summarized-deployment-info]
    runs-on: ubuntu-latest
    if: github.ref_name == 'staging' # only run in staging
    environment: staging # use always staging
    permissions:
      contents: write
    strategy:
      matrix:
        node-version: [16.15.0]
    steps:
      - name: Download slack-message-payload artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.SLACK_MESSAGE_PAYLOAD_ARTIFACT_NAME }}
      - name: echo service name
        run: echo config sync
      - name: cat file
        run: cat ${{ env.SLACK_MESSAGE_PAYLOAD_PATH }}
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload-file-path: ${{ env.SLACK_MESSAGE_PAYLOAD_PATH }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notification-prod:
    name: notifications prod
    needs: [create-release, upload-summarized-deployment-info]
    runs-on: ubuntu-latest
    if: github.ref_name == 'prod' # only run in prod
    environment: prod # use always prod
    permissions:
      contents: write
    strategy:
      matrix:
        node-version: [16.15.0]
    steps:
      - name: Download slack-message-payload artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.SLACK_MESSAGE_PAYLOAD_ARTIFACT_NAME }}
      - name: echo service name
        run: echo config sync
      - name: cat file
        run: cat ${{ env.SLACK_MESSAGE_PAYLOAD_PATH }}
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload-file-path: ${{ env.SLACK_MESSAGE_PAYLOAD_PATH }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notification-rollback:
    name: notifications rollback
    needs: [migrations, config-sync, upload-summarized-deployment-info]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref_type == 'tag' # only run when is a rollback
    environment: prod # use always prod
    permissions:
      contents: write
    strategy:
      matrix:
        node-version: [16.15.0]
    steps:
      - name: Download slack-message-payload artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.SLACK_MESSAGE_PAYLOAD_ARTIFACT_NAME }}
      - name: echo service name
        run: echo config sync
      - name: cat file
        run: cat ${{ env.SLACK_MESSAGE_PAYLOAD_PATH }}
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload-file-path: ${{ env.SLACK_MESSAGE_PAYLOAD_PATH }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
